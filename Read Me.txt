CONTROLLER
I. Calls the AppService class to
	1. Get records of all employees (appService.allEmp()) using the GET request (method = RequestMethod.GET, value = "/data")
		-Uses interface QrRepository to get all employees (qrRepository.findAll())
			-Extends MongoRepository to get all employees
	
	2. Get record of a particular employee (appService.getEmp(id)) using the GET request using that employee's ID (method=RequestMethod.GET,value="/data/{id}")
		-Uses interface QrRepository class to get that employee's details (qrRepository.findById(id))
			-Extends MongoRepository to get the details of that employee
	
	3. Adds details of a new employee (appService.newEmp(generator)) using POST request (method = RequestMethod.POST, value = "/add")
		-Calls the Generator class to set various details (data.getId(), data.getName(), data.getAssetId() etc.) to give the various details of the employee. These details are converted into a token (TokenString= id.substring(idlen/2)+name.substring(0,namelen/2)+asset.substring(0,assetlen/2)+serial.substring(seriallen/2)). This is then converted into hash code (data.setHash(Integer.toString(TokenString.hashCode()))) and saved (qrRepository.save(data)). The end date of the token is saved in validator class (validator.setEndDate(data.getEndDate())) to verify the validity of the QR Code. After this the QR code is generated by the QR code generator class (inFileQR.generateQRCodeImage(TokenString, 350, 350, QR_CODE_IMAGE_PATH))
			-The InFileQR class generates the QR code in PNG format using QRCodeWriter class (qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, width, height))
		 After the generation of the QR code, it is sent to the employee through mail using the Generate class (generate.run(data.getEmail(),name+LocalDate.now()))
			-The Generate class then calls the Mail class to:
					i.   set the sender's email (mail.setFrom("sauravarduino@gmail.com"))
					ii.  set the recipient's email (mail.setTo(to))
					iii. set the subject (mail.setSubject("CHECK YOUR QR"))
					iv.  set the content (mail.setContent(name))
			 The generate class then calls the EmailService class to send this email (emailService.sendSimpleMessage(mail,name))
	
	4. Delete an employee (appService.del(id)) from the records using DELETE request using his/her ID (method= RequestMethod.DELETE, value="/del/{id}")
		-Uses the interface QrRepository to delete the employee's record (qrRepository.deleteById(id))
			-Extends MongoRepository to delete the employee's records

	5. Update an employee (appService.update(id,generator)) using the PUT request using his/her ID (method= RequestMethod.PUT, value = "/update/{id}")
		-Calls the Generator class to update various details (data.getId(), data.getName(), data.getAssetId() etc.) of the employee. These details are converted into a new token (TokenString= id.substring(idlen/2)+name.substring(0,namelen/2)+asset.substring(0,assetlen/2)+serial.substring(seriallen/2)). This is then converted into a new hash code (data.setHash(Integer.toString(TokenString.hashCode()))) and saved (qrRepository.save(data)). The new end date of the token is saved in validator class (validator.setEndDate(data.getEndDate())) to verify the validity of the new QR Code. After this the new QR code is generated by the QR code generator class (inFileQR.generateQRCodeImage(TokenString, 350, 350, QR_CODE_IMAGE_PATH))
			-The InFileQR class generates the new QR code in PNG format using QRCodeWriter class (qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, width, height))
		 After the generation of the new QR code, it is sent to the employee through mail using the Generate class (generate.run(data.getEmail(),name+LocalDate.now()))
			-The Generate class then calls the Mail class to:
					i.   set the sender's email (mail.setFrom("sauravarduino@gmail.com"))
					ii.  set the recipient's email (mail.setTo(to))
					iii. set the subject (mail.setSubject("CHECK YOUR QR"))
					iv.  set the content (mail.setContent(name))
			 The generate class then calls the EmailService class to send this email (emailService.sendSimpleMessage(mail,name))

	6. Show the validity of the QR code as the output (appService.output(id)) using the GET request (method=RequestMethod.GET, value="/code/{id}")
	
	7. Validate the QR code of the employee (appService.validate(id)) using the GET request (method=RequestMethod.GET, value="/validate/{id}")
		-Uses the interface ValidRepository to validate the QR code (validRepository.findById(id))
			-Extends MongoRepository to validate the information stored in QR code.